las = 1,  # Make all labels horizontal
#notch = TRUE,  # Notches for CI for median
ylim = yLimits,  # Specify range on Y axis
boxwex = 0.6,  # Width of box as proportion of original
whisklty = 1,  # Whisker line type; 1 = solid line
staplelty = 1,  # Staple (line at end) type; 0 = none
outpch = 16,  # Symbols for outliers; 16 = filled circle
outcol = "slategray3",  # Color for outliers
main = "Differences per category per participant",
xlab = "Differences between both conditions (P - SK) in the  range of [-6, +6]",
col = colors,
cex.lab= 0.8,
cex.axis=0.8)
par(mar=c(5.1,7,4.1,2.1))
interval <- c([0:44100])
interval <- c(0:44100)
interval
results_500_0 <- read.csv(file="/example1_sine/output.csv", header=FALSE)
results_500_0 <- read.csv(file="example1_sine/output.csv", header=FALSE)
#set current working directory
setwd("/Users/ciska/CODE/_cpp/_cppExamples/course_content_2b/session3/")
results_500_0 <- read.csv(file="example1_sine/output.csv", header=FALSE)
results_500_0 <- read.csv(file="example1_sine/output.csv", header=FALSE)
#set current working directory
setwd("/Users/ciska/CODE/_cpp/_cppExamples/course_content_2b/session3/")
results_500_0 <- read.csv(file="example1_sine/output.csv", header=FALSE)
samples <- read.csv(file="example1_sine/output.csv", header=FALSE)
samples <- read.csv(file="example1_sine/output.csv", header=FALSE)
x_indices <- c(0:44100)
View(samples)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x, y = p095_1000_all,
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits_1000,
cex.main=1.1) # set size title
mtext("k=1000")
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 1.1)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = samples,
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits_1000,
cex.main=1.1) # set size title
#plot graph outlines
plot( x = x_indices, y = samples,
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
#plot graph outlines
plot( x = x_indices, y = samples,
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
mtext("k=1000")
x_indices.length
length(x_indices)
length(samples)
View(samples)
#set current working directory
setwd("/Users/ciska/CODE/UU/SCIP/A3-RANSAC/plot/data/")
#load the results
results_500_0 <- read.csv(file="experiment1_0_500_0_0.txt", header=TRUE)
View(results_500_0)
#plot graph outlines
plot( x = x_indices, y = x_indices,
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 44100)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = x_indices,
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
mtext("k=1000")
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 44100)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = x_indices,
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
#plot graph outlines
plot( x = x_indices, y = samples[1],
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
x_indices
samples[1]
length(samples)
length(samples[1])
length(samples)
length(samples[1])
length(samples[1:])
length(samples[:1])
x_indices <- c(1, 2, 3, 4)
length(x_indices)
x_indices
0:44100
x_indices <- c(0:44100)
x_indices
x_indices <- c(0:20)
x_indices
length(samples[])
length(samples[, 1])
length(samples[, 1])
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
x_indices <- c(0:44100)
length(x_indices)
length(x_indices)
length(x_indices)
length(x_indices)
length(x_indices)
length(x_indices)
length(samples[, 1])
length(samples[])
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 44100)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
mtext("k=1000")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
x_indices <- c(0:44100)
length(x_indices)
length(samples[, 1])
x_indices <- c(0:44099)
length(x_indices)
length(samples[, 1])
length(samples[])
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 44100)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
mtext("k=1000")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
mtext("k=1000")
length(samples[, 1])
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 1.1)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="p",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
mtext("k=1000")
#plot the lines
#set color and plot the num_iterations values for k = 500
par(col= colors[2])
lines(x, y_1000, type="l")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="l",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
#plot graph outlines
plot( x = x_indices[0:441], y = samples[0:441, 1],
type="l",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="l",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
mtext("k=1000")
#plot the lines
#set color and plot the num_iterations values for k = 500
par(col= colors[2])
lines(x, y_1000, type="l")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="l",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
plot(qnorm) # default range c(0, 1) is appropriate here,
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
#set current working directory
setwd("/Users/ciska/CODE/_cpp/_cppExamples/course_content_2b/session3/")
samples <- read.csv(file="example1_sine/output.csv", header=FALSE)
x_indices <- c(0:44099)
length(x_indices)
length(samples[])
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 1.1)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="l",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
abline(h = 0, v = 0:, lty = 3, col = "gray")
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:, lty = 3, col = "gray")
abline(h = 0, v = 0:0, lty = 3, col = "gray")
abline(h = 0, v = 0, lty = 3, col = "gray")
#set current working directory
setwd("/Users/ciska/CODE/_cpp/_cppExamples/course_content_2b/session3/")
samples <- read.csv(file="example1_sine/output.csv", header=FALSE)
x_indices <- c(0:44099)
length(x_indices)
length(samples[])
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 1.1)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="l",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
abline(h = 0, v = 0, lty = 3, col = "gray")
abline(h = 0, lty = 3, col = "gray")
#set current working directory
setwd("/Users/ciska/CODE/_cpp/_cppExamples/course_content_2b/session3/")
samples <- read.csv(file="example1_sine/output.csv", header=FALSE)
x_indices <- c(0:44099)
length(x_indices)
length(samples[])
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 1.1)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="l",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
abline(h = 0, lty = 3, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
plot(qnorm) # default range c(0, 1) is appropriate here,
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
curve(x^2 - 2, add = TRUE, col = "violet")
op <- par(mfrow = c(2, 2))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
plot (chippy, -8, -5)
for(ll in c("", "x", "y", "xy"))
curve(log(1+x), 1, 100, log = ll, sub = paste0("log = '", ll, "'"))
par(op)
plot(qnorm) # default range c(0, 1) is appropriate here,
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
abline(h = 0, lty = 3, col = "gray")
abline(h = 0, lty = 1, col = "gray")
abline(h = 0, lty = 1, col = "gray")
plot(qnorm) # default range c(0, 1) is appropriate here,
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
curve(sin, -2*pi, 2*pi, xname = "t")
abline(h = 0, lty = 1, col = "gray")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
op <- par(mfrow = c(2, 2))
curve(x^3 - 3*x, -2, 2)
curve(sin, -2*pi, 2*pi, xname = "t")
abline(h = 0, lty = 1, col = "gray")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
op <- par(mfrow = c(2, 2))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
plot (chippy, -8, -5)
for(ll in c("", "x", "y", "xy"))
curve(log(1+x), 1, 100, log = ll, sub = paste0("log = '", ll, "'"))
par(op)
#set current working directory
setwd("/Users/ciska/CODE/_cpp/_cppExamples/course_content_2b/session3/")
samples <- read.csv(file="example1_sine/output.csv", header=FALSE)
x_indices <- c(0:44099)
length(x_indices)
length(samples[])
#retrieve min and max values used on y-axis
y_limits = c(-1.1, 1.1)
#set plotting point symbol and color
par(pch=1, col="black")
#plot graph outlines
plot( x = x_indices, y = samples[, 1],
type="l",
main="Audio samples",
xlab="sample index",
ylab="amplitude",
ylim = y_limits,
cex.main=1.1) # set size title
abline(h = 0, lty = 1, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
plot(qnorm) # default range c(0, 1) is appropriate here,
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
op <- par(mfrow = c(2, 2))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
plot (chippy, -8, -5)
for(ll in c("", "x", "y", "xy"))
curve(log(1+x), 1, 100, log = ll, sub = paste0("log = '", ll, "'"))
par(op)
curve(sin, -2*pi, 2*pi, xname = "t")
abline(h = 0, lty = 3, col = "gray")
abline(h = 0, lty = 1, col = "blue")
gray
abline(h = 0, lty = 1, col = "gray")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
curve(sin, -2*pi, 2*pi, xname = "t")
abline(h = 0, lty = 1, col = "gray")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
op <- par(mfrow = c(2, 2))
op <- par(mfrow = c(1, 1))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
# split imgae in 4 graphs
# op <- par(mfrow = c(2, 2))
# return to 1 plot per image
# op <- par(mfrow = c(1, 1))
curve(x^3 - 3*x, -2, 2)
# split imgae in 4 graphs
# op <- par(mfrow = c(2, 2))
# return to 1 plot per image
# op <- par(mfrow = c(1, 1))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
curve(sin, -2*pi, 2*pi, xname = "t")
# split imgae in 4 graphs
# op <- par(mfrow = c(2, 2))
# return to 1 plot per image
# op <- par(mfrow = c(1, 1))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
curve(sin, -2*pi, 2*pi, add = TRUE, xname = "t", col="pink")
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
# split imgae in 4 graphs
# op <- par(mfrow = c(2, 2))
# return to 1 plot per image
# op <- par(mfrow = c(1, 1))
curve(x^3 - 3*x, -2, 2* pi)
curve(sin, -2*pi, 2*pi, xname = "t")
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
plot (chippy, -8, -5)
for(ll in c("", "x", "y", "xy"))
curve(log(1+x), 1, 100, log = ll, sub = paste0("log = '", ll, "'"))
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(sin, 0, samplerate, xname = "t")
samplerate = 44100
curve(sin, 0, samplerate, xname = "t")
curve(sin(x / 44100), 0, samplerate, xname = "t")
sinewave <- function(x) sin(x / samplerate)
curve(sinewave, 0, samplerate, xname = "t")
sinewave <- function(x) sin(2*pi*x / samplerate)
curve(sinewave, 0, samplerate, xname = "t")
abline(h = 0, lty = 1, col = "gray")
